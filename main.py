import asyncio
import sys
import os
import signal
import traceback
import aiohttp
import subprocess
from loguru import logger
from telegram_handler import setup_telegram_bot
from websocket import MEXCWebSocket
from trading import TradingBot
from config import send_notification
import telegram.error
import time
from memory_profiler import profile

def handle_shutdown(loop, tasks, telegram_app, ws):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (Ctrl+C –∏–ª–∏ SIGTERM)")
    for task in tasks:
        task.cancel()
    async def shutdown():
        try:
            await asyncio.wait(tasks, timeout=3)
        except asyncio.TimeoutError:
            logger.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è")
        if telegram_app:
            try:
                await telegram_app.updater.stop()
                await telegram_app.stop()
                await telegram_app.shutdown()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram: {str(e)}")
        if ws:
            try:
                await ws.close()
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {str(e)}")
        logger.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    loop.run_until_complete(shutdown())
    loop.run_until_complete(loop.shutdown_asyncgens())
    loop.close()
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ main.py")
    sys.exit(0)

async def check_internet_connection(retries=2, retry_delay=2):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
    
    Args:
        retries (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤.
        retry_delay (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
    
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    async def try_http_check(url, timeout=5, attempt=1):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=timeout) as resp:
                    if resp.status == 200:
                        logger.debug(f"–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {url}")
                        return True
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {url}: HTTP {resp.status}")
                    return False
        except aiohttp.ClientConnectorError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {str(e)}")
            return False
        except aiohttp.ClientError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {str(e)}")
            return False
        except asyncio.TimeoutError:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries})")
            return False
        except Exception as e:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {str(e)}")
            return False

    # –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    check_urls = [
        "https://api.mexc.com/api/v3/ping",  # –û—Å–Ω–æ–≤–Ω–æ–π API MEXC
        "https://1.1.1.1",                    # Cloudflare DNS
        "https://8.8.8.8",                    # Google DNS
    ]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for url in check_urls:
        for attempt in range(1, retries + 1):
            if await try_http_check(url, timeout=5, attempt=attempt):
                return True
            if attempt < retries:
                logger.debug(f"–û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –¥–ª—è {url}")
                await asyncio.sleep(retry_delay)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞, –µ—Å–ª–∏ HTTP –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    try:
        ping_cmd = ["ping", "-c", "1", "-W", "2", "8.8.8.8"]
        result = subprocess.run(
            ping_cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=5
        )
        if result.returncode == 0:
            logger.debug("–£—Å–ø–µ—à–Ω—ã–π –ø–∏–Ω–≥ –¥–æ 8.8.8.8")
            return True
        logger.warning(f"–ü–∏–Ω–≥ –¥–æ 8.8.8.8 –Ω–µ —É–¥–∞–ª—Å—è: {result.stderr}")
    except FileNotFoundError:
        logger.error("–ö–æ–º–∞–Ω–¥–∞ ping –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ iputils-ping: sudo apt-get install iputils-ping")
    except subprocess.TimeoutExpired:
        logger.warning("–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ping")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–∏–Ω–≥–∞: {str(e)}")

    logger.error("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å")
    return False

async def watchdog(telegram_app, ws, trading_bot, max_retries=5):
    """Watchdog –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    await asyncio.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    retry_count = 0
    internet_lost_notified = False
    was_internet_lost = False
    while retry_count < max_retries:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram
            if not telegram_app.updater.running:
                logger.error("Telegram-–ø–æ–ª–ª–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                raise Exception("Telegram stopped")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebSocket
            if ws.ws is None or ws.ws.closed:
                logger.error("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                raise Exception("WebSocket closed")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å WebSocket (—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 120 —Å–µ–∫—É–Ω–¥)
            if time.time() - ws.last_message_time > 120:
                logger.error(f"WebSocket –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª–µ–µ 120 —Å–µ–∫—É–Ω–¥, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {ws.last_message_time})")
                raise Exception("WebSocket inactive")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ TradingBot
            if await check_internet_connection():
                usdt_balance = await trading_bot.exchange.get_balance("USDT")
                if usdt_balance is None:
                    logger.error("TradingBot –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–æ—à–∏–±–∫–∞ API)")
                    raise Exception("TradingBot API error")
                # –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                if was_internet_lost:
                    logger.info("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                    await send_notification(telegram_app, "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
                    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ main.py —Å –∫–æ–¥–æ–º 42 (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
                    sys.exit(42)
            else:
                if not internet_lost_notified:
                    logger.warning("–ü–æ—Ç–µ—Ä—è–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    await send_notification(telegram_app, "‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    internet_lost_notified = True
                was_internet_lost = True
                await asyncio.sleep(60)
                continue
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            retry_count = 0
            if internet_lost_notified:
                logger.info("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                await send_notification(telegram_app, "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ main.py —Å –∫–æ–¥–æ–º 42 (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
                sys.exit(42)
            internet_lost_notified = False
            was_internet_lost = False
            logger.debug(f"WebSocket –∞–∫—Ç–∏–≤–µ–Ω, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {ws.last_message_time}")
            await asyncio.sleep(60)
        except Exception as e:
            retry_count += 1
            logger.error(f"Watchdog: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–±–æ–π ({retry_count}/{max_retries}): {str(e)}")
            if retry_count >= max_retries:
                logger.critical("Watchdog: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                await send_notification(telegram_app, "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ main.py —Å –∫–æ–¥–æ–º 42 (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π)")
                sys.exit(42)
            await asyncio.sleep(10)

async def run_polling(telegram_app):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–ø–æ–ª–ª–∏–Ω–≥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–±–æ–µ–≤ —Å–µ—Ç–∏."""
    reconnect_delay = 10
    attempt = 0
    while True:
        try:
            await telegram_app.updater.start_polling()
            await asyncio.Event().wait()
        except asyncio.CancelledError:
            logger.info("Telegram-–ø–æ–ª–ª–∏–Ω–≥ –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except telegram.error.NetworkError as e:
            attempt += 1
            logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram-–ø–æ–ª–ª–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {str(e)}")
            if not await check_internet_connection():
                logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                while not await check_internet_connection():
                    await asyncio.sleep(reconnect_delay * (2 ** min(attempt, 5)))
            else:
                logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π Telegram. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {reconnect_delay * (2 ** min(attempt, 5))} —Å–µ–∫")
            await asyncio.sleep(reconnect_delay * (2 ** min(attempt, 5)))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram-–ø–æ–ª–ª–∏–Ω–≥–∞: {str(e)}\n{traceback.format_exc()}")
            attempt += 1
            await asyncio.sleep(reconnect_delay * (2 ** min(attempt, 5)))

async def run_websocket(ws, trading_bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–±–æ–µ–≤ —Å–µ—Ç–∏."""
    reconnect_delay = 10
    attempt = 0
    while True:
        try:
            if not ws.listen_key or not await ws.extend_listen_key():
                logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ listenKey")
                await ws.create_listen_key()
            await ws.connect()
            await asyncio.Event().wait()
        except asyncio.CancelledError:
            logger.info("WebSocket –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except (aiohttp.ClientError, ConnectionError) as e:
            attempt += 1
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {str(e)}\n{traceback.format_exc()}")
            if not await check_internet_connection():
                logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                await send_notification(trading_bot.telegram_app, "‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
                while not await check_internet_connection():
                    await asyncio.sleep(reconnect_delay * (2 ** min(attempt, 5)))
            else:
                logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π WebSocket. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {reconnect_delay * (2 ** min(attempt, 5))} —Å–µ–∫")
            await asyncio.sleep(reconnect_delay * (2 ** min(attempt, 5)))
            await trading_bot.sync_orders()
        except Exception as e:
            attempt += 1
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ WebSocket (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {str(e)}\n{traceback.format_exc()}")
            await send_notification(trading_bot.telegram_app, f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ WebSocket: {str(e)}")
            await asyncio.sleep(reconnect_delay * (2 ** min(attempt, 5)))

async def run_bot_with_reconnect():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º."""
    max_attempts = 10
    attempt = 0
    tasks = []
    telegram_app = None
    ws = None

    while attempt < max_attempts:
        try:
            if not await check_internet_connection():
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                attempt += 1
                await asyncio.sleep(10 * (2 ** min(attempt, 5)))
                continue

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{attempt + 1}")
            attempt = 0

            logger.remove()
            logger.add("bot.log", rotation="10 MB", level="INFO")
            logger.add(sys.stdout, colorize=True, level="INFO")
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

            API_KEY = os.getenv("MEXC_API_KEY")
            SECRET_KEY = os.getenv("MEXC_SECRET_KEY")
            if not API_KEY or not SECRET_KEY:
                logger.error("MEXC_API_KEY –∏–ª–∏ MEXC_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")
                return

            telegram_app = setup_telegram_bot()
            trading_bot = TradingBot(telegram_app)
            ws = MEXCWebSocket(
                on_price_update=trading_bot.on_price_update,
                trading_bot=trading_bot
            )

            telegram_app.bot_data["trading_bot"] = trading_bot

            await telegram_app.initialize()
            await telegram_app.start()
            await trading_bot.sync_orders()

            try:
                open_orders = await trading_bot.exchange.get_open_orders()
                for order_id, status, price, client_order_id in open_orders:
                    if status in ["NEW", "PARTIALLY_FILLED"] and client_order_id.startswith("BOT_"):
                        orders = trading_bot.order_manager.load_orders(trading_bot.order_manager.order_file)
                        if not any(o["order_id"] == order_id for o in orders):
                            order_details = await trading_bot.exchange.check_order_status(order_id)
                            quantity = "0"
                            if order_details[0]:
                                quantity = str(round(float(order_details[1]), 2)) if order_details[1] else "0"
                            orders.append({
                                "order_id": order_id,
                                "client_order_id": client_order_id,
                                "side": "SELL",
                                "type": "LIMIT",
                                "status": "active",
                                "quantity": quantity,
                                "price": str(round(price, 2)),
                                "amount": "0",
                                "timestamp": int(time.time() * 1000),
                                "profit": "0",
                                "notified": False,
                                "parent_order_id": ""
                            })
                            trading_bot.order_manager.save_orders(trading_bot.order_manager.order_file, orders)
                            trading_bot.position_active = True
                            trading_bot.order_id = order_id
                            logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä: {order_id}, clientOrderId: {client_order_id}, quantity: {quantity}")
            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
                continue

            tasks = [
                asyncio.create_task(run_polling(telegram_app)),
                asyncio.create_task(run_websocket(ws, trading_bot)),
                asyncio.create_task(watchdog(telegram_app, ws, trading_bot))
            ]

            await asyncio.gather(*tasks, return_exceptions=True)

        except asyncio.CancelledError:
            logger.info("–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω")
            break
        except aiohttp.ClientError as e:
            attempt += 1
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {str(e)}\n{traceback.format_exc()}")
            await send_notification(telegram_app, f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {str(e)}")
            if attempt >= max_attempts:
                logger.critical("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                await send_notification(telegram_app, "üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ main.py —Å –∫–æ–¥–æ–º 42 (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫)")
                sys.exit(42)
            await asyncio.sleep(10 * (2 ** min(attempt, 5)))
        except Exception as e:
            attempt += 1
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {str(e)}\n{traceback.format_exc()}")
            await send_notification(telegram_app, f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {str(e)}")
            if attempt >= max_attempts:
                logger.critical("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                await send_notification(telegram_app, "üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ main.py —Å –∫–æ–¥–æ–º 42 (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫)")
                sys.exit(42)
            await asyncio.sleep(10 * (2 ** min(attempt, 5)))

        finally:
            for task in tasks:
                task.cancel()
            try:
                await asyncio.wait(tasks, timeout=3)
            except asyncio.TimeoutError:
                logger.warning("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è")
            if telegram_app:
                try:
                    await telegram_app.updater.stop()
                    await telegram_app.stop()
                    await telegram_app.shutdown()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram: {str(e)}")
            if ws:
                try:
                    await ws.close()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {str(e)}")
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    loop = asyncio.get_event_loop()
    tasks = []
    telegram_app = None
    ws = None

    def signal_handler(sig, frame):
        handle_shutdown(loop, tasks, telegram_app, ws)
        release_lock(lock_fd)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        await run_bot_with_reconnect()
    finally:
        release_lock(lock_fd)

if __name__ == "__main__":
    asyncio.run(main())