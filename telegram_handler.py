# telegram_handler.py
import json
import os
import re
from loguru import logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from telegram.error import BadRequest, NetworkError
from config import settings, save_state, TELEGRAM_TOKEN
from trading import TradingBot
from datetime import datetime

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    chat_id = update.message.chat_id
    try:
        state = {}
        from config import STATE_FILE
        if os.path.exists(STATE_FILE):
            with open(STATE_FILE, "r", encoding="utf-8") as f:
                state = json.load(f)
        state["chat_id"] = chat_id
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, indent=4, ensure_ascii=False)
        logger.info(f"chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id: {str(e)}")

    await show_main_menu(update, context, text=(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "1. –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è (–º–∏–Ω. 0.5%)\n"
        "2. –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ (–º–∏–Ω. 0.5%)\n"
        "3. –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ (–º–∏–Ω. 2 USDT)\n"
        "4. –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∏–Ω. 2 USDT)\n"
        "5. –ö–æ–º–∏—Å—Å–∏–∏ (—Ç–µ–π–∫–µ—Ä –∏ –º–µ–π–∫–µ—Ä, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/autobuy - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/buy - –°–æ–≤–µ—Ä—à–∏—Ç—å —Ä—É—á–Ω—É—é –ø–æ–∫—É–ø–∫—É\n"
        "/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å USDT\n"
        "/price - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É SOL/USDT\n"
        "/settings - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–±—ã–ª–∏\n"
        "/orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞\n"
        "/limiter - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞\n"
        "/fee_taker - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é —Ç–µ–π–∫–µ—Ä–∞\n"
        "/fee_maker - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –º–µ–π–∫–µ—Ä–∞\n"
        "–§–æ—Ä–º–∞—Ç: /stats [DD.MM.YYYY | MM.YYYY | all]"
    ))

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å % –ø–∞–¥–µ–Ω–∏—è", callback_data="set_drop")],
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å % –ø—Ä–∏–±—ã–ª–∏", callback_data="set_profit")],
        [InlineKeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞", callback_data="set_order")],
        [InlineKeyboardButton("üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞", callback_data="limiter")],
        [InlineKeyboardButton("üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏–∏", callback_data="set_fees")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: {str(e)}")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT."""
    trading_bot = context.bot_data.get("trading_bot")
    if not trading_bot:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.error("TradingBot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data")
        return

    try:
        usdt_balance = await trading_bot.get_usdt_balance()
        used_balance = await trading_bot.get_used_balance()
        fixed_limit = settings.get("fixed_balance_limit", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        message = (
            f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.4f} USDT\n"
            f"üí∏ –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ: {used_balance:.4f} USDT\n"
            f"üìä –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞: {fixed_limit}{' USDT' if isinstance(fixed_limit, (int, float)) else ''}"
        )
        await update.message.reply_text(message)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –±–∞–ª–∞–Ω—Å USDT: {usdt_balance:.4f}, –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ: {used_balance:.4f}")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /balance: {str(e)}")

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É SOL/USDT."""
    trading_bot = context.bot_data.get("trading_bot")
    if not trading_bot:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.error("TradingBot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data")
        return

    try:
        current_price, _ = await trading_bot.get_price_info()
        if current_price is None:
            await update.message.reply_text("‚ö†Ô∏è –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ SOL/USDT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            logger.warning("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ SOL/USDT –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
            return
        await update.message.reply_text(f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ SOL/USDT: {current_price:.2f} USDT")
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Ü–µ–Ω–∞ SOL/USDT: {current_price:.2f}")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /price: {str(e)}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–±—ã–ª–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    trading_bot = context.bot_data.get("trading_bot")
    if not trading_bot:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.error("TradingBot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data")
        return

    args = context.args
    period = args[0] if args else None
    month_names = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
    }

    try:
        if not period:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: /stats [DD.MM.YYYY | MM.YYYY | all]")
            return
        elif period.lower() == "all":
            total_trades, total_profit = await trading_bot.calculate_profit("all")
            message = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:*\n"
                f"üìà *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:* `{total_trades}`\n"
                f"üí∞ *–ü—Ä–∏–±—ã–ª—å:* `{total_profit:.4f} USDT`"
            )
        elif len(period.split('.')) == 3:
            day, month, year = map(int, period.split('.'))
            date = datetime(year, month, day)
            total_trades, total_profit = await trading_bot.calculate_profit("day", date)
            message = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:*\n"
                f"üìà *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:* `{total_trades}`\n"
                f"üí∞ *–ü—Ä–∏–±—ã–ª—å:* `{total_profit:.4f} USDT`"
            )
        elif len(period.split('.')) == 2:
            month, year = map(int, period.split('.'))
            if month < 1 or month > 12:
                await update.message.reply_text("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12. –ü—Ä–∏–º–µ—Ä: /stats 05.2025")
                return
            month_name = month_names.get(month, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü")
            total_trades, total_profit = await trading_bot.calculate_profit("month", datetime(year, month, 1))
            message = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name} {year}:*\n"
                f"üìà *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:* `{total_trades}`\n"
                f"üí∞ *–ü—Ä–∏–±—ã–ª—å:* `{total_profit:.4f} USDT`"
            )
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /stats [DD.MM.YYYY | MM.YYYY | all]")
            return

        await update.message.reply_text(message, parse_mode="Markdown")
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}")
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: /stats 13.05.2025")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {str(e)}")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /stats: {str(e)}")

async def orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    trading_bot = context.bot_data.get("trading_bot")
    if not trading_bot:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.error("TradingBot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data")
        return

    try:
        args = context.args
        filters = {"sell_price": None, "buy_price": None}
        for arg in args:
            match = re.match(r"^(sell_price|buy_price)\s*(>|>=|<|<=|=)\s*(\d+\.?\d*)$", arg)
            if match:
                key, operator, value = match.groups()
                try:
                    filters[key] = {"operator": operator, "value": float(value)}
                except ValueError:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {key}: {value}")
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: {arg}")
                    return
            else:
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞. –ü—Ä–∏–º–µ—Ä: /orders sell_price>168.00 buy_price<167.00\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: >, <, >=, <=, ="
                )
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞: {arg}")
                return

        orders = trading_bot.order_manager.load_orders(trading_bot.order_manager.order_file)
        active_orders = []

        for order in orders:
            if (order["status"] == "active" and
                order["side"] == "SELL" and
                order.get("client_order_id", "").startswith("BOT_")):
                try:
                    sell_price = float(order["price"])
                    parent_id = order.get("parent_order_id", "")
                    buy_price = None
                    for buy_order in orders:
                        if buy_order["order_id"] == parent_id and buy_order["side"] == "BUY":
                            buy_price = float(buy_order["price"])
                            break

                    passes_filters = True
                    if filters["sell_price"]:
                        f = filters["sell_price"]
                        if f["operator"] == ">":
                            passes_filters = passes_filters and sell_price > f["value"]
                        elif f["operator"] == ">=":
                            passes_filters = passes_filters and sell_price >= f["value"]
                        elif f["operator"] == "<":
                            passes_filters = passes_filters and sell_price < f["value"]
                        elif f["operator"] == "<=":
                            passes_filters = passes_filters and sell_price <= f["value"]
                        elif f["operator"] == "=":
                            passes_filters = passes_filters and sell_price == f["value"]

                    if filters["buy_price"] and buy_price is not None:
                        f = filters["buy_price"]
                        if f["operator"] == ">":
                            passes_filters = passes_filters and buy_price > f["value"]
                        elif f["operator"] == ">=":
                            passes_filters = passes_filters and buy_price >= f["value"]
                        elif f["operator"] == "<":
                            passes_filters = passes_filters and buy_price < f["value"]
                        elif f["operator"] == "<=":
                            passes_filters = passes_filters and buy_price <= f["value"]
                        elif f["operator"] == "=":
                            passes_filters = passes_filters and buy_price == f["value"]
                    elif filters["buy_price"]:
                        passes_filters = False

                    if passes_filters:
                        active_orders.append({
                            "order": order,
                            "buy_price": buy_price
                        })
                except (ValueError, TypeError) as e:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –æ—Ä–¥–µ—Ä {order['order_id']}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({str(e)})")
                    continue

        if not active_orders:
            message = "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º." if args else "üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç."
            await update.message.reply_text(message)
            logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ {args}: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return

        chat_id = update.message.chat_id
        if chat_id not in context.user_data:
            context.user_data[chat_id] = {}
        context.user_data[chat_id]["orders"] = active_orders
        context.user_data[chat_id]["filters"] = args
        context.user_data[chat_id]["orders_page"] = 0
        context.user_data[chat_id]["message_id"] = None

        message, reply_markup = await format_orders_page(active_orders, 0)
        sent_message = await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)
        context.user_data[chat_id]["message_id"] = sent_message.message_id
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ {args}: –Ω–∞–π–¥–µ–Ω–æ {len(active_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /orders: {str(e)}")

async def orders_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    logger.debug(f"Callback –ø–æ–ª—É—á–µ–Ω: {query.data}")

    chat_id = query.message.chat_id
    if chat_id not in context.user_data or "orders" not in context.user_data[chat_id]:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /orders —Å–Ω–æ–≤–∞.")
        logger.warning(f"–°–µ—Å—Å–∏—è /orders –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è chat_id {chat_id}")
        return

    active_orders = context.user_data[chat_id]["orders"]
    current_page = context.user_data[chat_id]["orders_page"]
    action = query.data

    if action == "orders_prev" and current_page > 0:
        current_page -= 1
    elif action == "orders_next":
        max_page = (len(active_orders) - 1) // 5
        if current_page < max_page:
            current_page += 1
        else:
            return

    context.user_data[chat_id]["orders_page"] = current_page
    message, reply_markup = await format_orders_page(active_orders, current_page)

    try:
        await query.message.edit_text(message, parse_mode="Markdown", reply_markup=reply_markup)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ /orders: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}")
    except BadRequest as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è /orders: {str(e)}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤.")

async def format_orders_page(active_orders, page):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤."""
    orders_per_page = 5
    start_idx = page * orders_per_page
    end_idx = min(start_idx + orders_per_page, len(active_orders))
    max_page = (len(active_orders) - 1) // orders_per_page

    message = f"üìä *–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{max_page + 1}):*\n\n"
    for idx, item in enumerate(active_orders[start_idx:end_idx], start_idx + 1):
        order = item["order"]
        buy_price = item["buy_price"]
        order_time = datetime.fromtimestamp(order["timestamp"] / 1000).strftime("%d.%m.%Y %H:%M:%S")
        trade_type = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è" if order.get("trade_type", "auto") == "auto" else "–†—É—á–Ω–∞—è"
        message += (
            f"{idx}Ô∏è‚É£ *–û—Ä–¥–µ—Ä:* `{order['order_id']}`\n"
            f"üìà *–¢–∏–ø:* {trade_type}\n"
            f"üí∞ *–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:* {order['price']} USDT\n"
            f"üí∏ *–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:* {'–ù–µ –Ω–∞–π–¥–µ–Ω–∞' if buy_price is None else f'{buy_price:.2f} USDT'}\n"
            f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {order['quantity']} SOL\n"
            f"üïí *–í—Ä–µ–º—è:* {order_time}\n\n"
        )

    if len(message) > 4096:
        message = message[:4000] + "\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ Telegram."

    keyboard = []
    if page > 0:
        keyboard.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="orders_prev"))
    if page < max_page:
        keyboard.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="orders_next"))
    reply_markup = InlineKeyboardMarkup([keyboard]) if keyboard else None

    return message, reply_markup

async def autobuy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é."""
    if any(settings[key] is None for key in ["drop_percent", "profit_percent", "order_size"]):
        await update.message.reply_text("–û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–µ–∑ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return

    trading_bot = context.bot_data.get("trading_bot")
    if not trading_bot:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.error("TradingBot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data")
        return

    usdt_balance = await trading_bot.get_usdt_balance()
    order_size = settings["order_size"]
    if usdt_balance < order_size:
        settings["autobuy_enabled"] = True
        save_state()
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: {usdt_balance} < {order_size}\n–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: {usdt_balance} < {order_size}")
        return

    orders = trading_bot.order_manager.load_orders(trading_bot.order_manager.order_file)
    active_sell_orders = [order for order in orders if order["status"] == "active" and order["side"] == "SELL"]
    if active_sell_orders:
        settings["autobuy_enabled"] = True
        save_state()
        await update.message.reply_text("–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        logger.info(f"–¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ {len(active_sell_orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        return

    settings["autobuy_enabled"] = True
    save_state()
    await trading_bot.start_trading()
    await update.message.reply_text("–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")
    logger.info("–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–≤–µ—Ä—à–∞–µ—Ç —Ä—É—á–Ω—É—é –ø–æ–∫—É–ø–∫—É."""
    if any(settings[key] is None for key in ["drop_percent", "profit_percent", "order_size"]):
        await update.message.reply_text("–û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        return

    trading_bot = context.bot_data.get("trading_bot")
    if not trading_bot:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.error("TradingBot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data")
        return

    success = await trading_bot.manual_buy()
    if success:
        await update.message.reply_text("–†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        logger.info("–†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    else:
        logger.debug("–†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ manual_buy")

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    drop = settings["drop_percent"] if settings["drop_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    profit = settings["profit_percent"] if settings["profit_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    size = settings["order_size"] if settings["order_size"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    balance_limit = settings["fixed_balance_limit"] if settings["fixed_balance_limit"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    taker_fee = settings["taker_fee_percent"] if settings["taker_fee_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    maker_fee = settings["maker_fee_percent"] if settings["maker_fee_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    autobuy = "–≤–∫–ª—é—á–µ–Ω–∞" if settings["autobuy_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"

    message = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        f"üìâ *–ü–∞–¥–µ–Ω–∏–µ:* {drop}{' %' if isinstance(drop, (int, float)) else ''}\n"
        f"üí∞ *–ü—Ä–∏–±—ã–ª—å:* {profit}{' %' if isinstance(profit, (int, float)) else ''}\n"
        f"üí∏ *–û—Ä–¥–µ—Ä:* {size}{' USDT' if isinstance(size, (int, float)) else ''}\n"
        f"üíµ *–õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞:* {balance_limit}{' USDT' if isinstance(balance_limit, (int, float)) else ''}\n"
        f"üí≥ *–ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞:* {taker_fee}{' %' if isinstance(taker_fee, (int, float)) else ''}\n"
        f"üí≥ *–ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞:* {maker_fee}{' %' if isinstance(maker_fee, (int, float)) else ''}\n"
        f"ü§ñ *–¢–æ—Ä–≥–æ–≤–ª—è:* {autobuy}"
    )

    await show_main_menu(update, context, text=message)
    logger.info("–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é, —Å–æ—Ö—Ä–∞–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º."""
    if not settings["autobuy_enabled"]:
        await update.message.reply_text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏, –Ω–æ autobuy_enabled —É–∂–µ False")
        return

    settings["autobuy_enabled"] = False
    save_state()
    
    trading_bot = context.bot_data.get("trading_bot")
    if trading_bot:
        orders = trading_bot.order_manager.load_orders(trading_bot.order_manager.order_file)
        active_sell_orders = [order for order in orders if order["status"] == "active" and order["side"] == "SELL" and order.get("client_order_id", "").startswith("BOT_")]
        active_orders_count = len(active_sell_orders)
        message = (
            f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
            f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ({active_orders_count}) –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.\n"
            f"üîÑ –†—É—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã."
        )
    else:
        message = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

    await update.message.reply_text(message)
    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {active_orders_count if trading_bot else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

async def limiter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏."""
    trading_bot = context.bot_data.get("trading_bot")
    if not trading_bot:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        logger.error("TradingBot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data")
        return

    args = context.args
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ (–º–∏–Ω. 2 USDT, –Ω–∞–ø—Ä–∏–º–µ—Ä: /limiter 50) –∏–ª–∏ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞.")
        return

    try:
        value = float(args[0])
        if value == 0:
            settings["fixed_balance_limit"] = None
            save_state()
            await update.message.reply_text("‚úÖ –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç.")
            logger.info("–õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç")
            return
        if value < 2.0:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 USDT.")
            logger.error("–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ –º–µ–Ω–µ–µ 2 USDT")
            return

        usdt_balance = await trading_bot.get_usdt_balance()
        if value > usdt_balance:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: –õ–∏–º–∏—Ç ({value:.2f} USDT) –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ({usdt_balance:.4f} USDT).")
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç {value} USDT –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ {usdt_balance}")
            return

        used_balance = await trading_bot.get_used_balance()
        if used_balance > value:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ {used_balance:.4f} USDT –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç {value:.2f} USDT.\n"
                "–î–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç."
            )
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç {value} USDT –ø—Ä–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ {used_balance}")
            return

        settings["fixed_balance_limit"] = value
        save_state()
        await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value:.2f} USDT")
        logger.info(f"–õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value:.2f} USDT")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50.0")
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è /limiter: {args[0]}")
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /limiter: {str(e)}")

async def fee_taker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é —Ç–µ–π–∫–µ—Ä–∞."""
    args = context.args
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Ç–µ–π–∫–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /fee_taker 0.05)")
        return

    try:
        value = float(args[0])
        if value < 0:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            logger.error("–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é —Ç–µ–π–∫–µ—Ä–∞")
            return

        settings["taker_fee_percent"] = value
        save_state()
        await update.message.reply_text(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value:.4f}%")
        logger.info(f"–ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value:.4f}%")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.05")
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è /fee_taker: {args[0]}")
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /fee_taker: {str(e)}")

async def fee_maker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –º–µ–π–∫–µ—Ä–∞."""
    args = context.args
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –º–µ–π–∫–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: /fee_maker 0.0)")
        return

    try:
        value = float(args[0])
        if value < 0:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–æ–º–∏—Å—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
            logger.error("–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –º–µ–π–∫–µ—Ä–∞")
            return

        settings["maker_fee_percent"] = value
        save_state()
        await update.message.reply_text(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value:.4f}%")
        logger.info(f"–ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value:.4f}%")
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0")
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–ª—è /fee_maker: {args[0]}")
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /fee_maker: {str(e)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    logger.debug(f"Callback –ø–æ–ª—É—á–µ–Ω: {query.data}")

    try:
        if query.data == "set_drop":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è (–º–∏–Ω. 0.5%, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2.0):")
            context.user_data["setting"] = "drop_percent"
            context.user_data["message_id"] = query.message.message_id
        elif query.data == "set_profit":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ (–º–∏–Ω. 0.5%, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0):")
            context.user_data["setting"] = "profit_percent"
            context.user_data["message_id"] = query.message.message_id
        elif query.data == "set_order":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ (–º–∏–Ω. 2 USDT, –Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
            context.user_data["setting"] = "order_size"
            context.user_data["message_id"] = query.message.message_id
        elif query.data == "limiter":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ (–º–∏–Ω. 2 USDT, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50) –∏–ª–∏ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞:")
            context.user_data["setting"] = "fixed_balance_limit"
            context.user_data["message_id"] = query.message.message_id
        elif query.data == "set_fees":
            keyboard = [
                [InlineKeyboardButton("üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é —Ç–µ–π–∫–µ—Ä–∞", callback_data="fee_taker")],
                [InlineKeyboardButton("üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –º–µ–π–∫–µ—Ä–∞", callback_data="fee_maker")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–∏—Å—Å–∏–∏:", reply_markup=reply_markup)
        elif query.data == "fee_taker":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Ç–µ–π–∫–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.05):")
            context.user_data["setting"] = "taker_fee_percent"
            context.user_data["message_id"] = query.message.message_id
        elif query.data == "fee_maker":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –º–µ–π–∫–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0):")
            context.user_data["setting"] = "maker_fee_percent"
            context.user_data["message_id"] = query.message.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {str(e)}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def set_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    setting = context.user_data.get("setting")
    message_id = context.user_data.get("message_id")
    if not setting:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        await show_main_menu(update, context, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        context.user_data.clear()
        return

    text = update.message.text.strip()
    try:
        value = float(text)
        if setting == "drop_percent" and value < 0.5:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.5%")
        elif setting == "profit_percent" and value < 0.5:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.5%")
        elif setting == "order_size" and value < 2.0:
            raise ValueError("–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 USDT")
        elif setting == "fixed_balance_limit":
            if value == 0:
                settings["fixed_balance_limit"] = None
                save_state()
                await update.message.reply_text("‚úÖ –õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç.")
                logger.info("–õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç")
                context.user_data.clear()
                return
            if value < 2.0:
                raise ValueError("–õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 USDT")
            trading_bot = context.bot_data.get("trading_bot")
            if trading_bot:
                usdt_balance = await trading_bot.get_usdt_balance()
                if value > usdt_balance:
                    raise ValueError(f"–õ–∏–º–∏—Ç ({value:.2f} USDT) –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ({usdt_balance:.4f} USDT)")
                used_balance = await trading_bot.get_used_balance()
                if used_balance > value:
                    raise ValueError(
                        f"–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ {used_balance:.4f} USDT –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö, —á—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {value:.2f} USDT"
                    )
        elif setting in ["taker_fee_percent", "maker_fee_percent"] and value < 0:
            raise ValueError("–ö–æ–º–∏—Å—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")

        settings[setting] = value
        save_state()
        logger.info(f"{setting}: {value}{' USDT' if setting in ['order_size', 'fixed_balance_limit'] else '%'}")

        setting_name = {
            "drop_percent": "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è",
            "profit_percent": "–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏",
            "order_size": "–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞",
            "fixed_balance_limit": "–õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞",
            "taker_fee_percent": "–ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞",
            "maker_fee_percent": "–ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞"
        }.get(setting, setting)
        await update.message.reply_text(
            f"‚úÖ {setting_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}{' USDT' if setting in ['order_size', 'fixed_balance_limit'] else '%'}"
        )

        drop = settings["drop_percent"] if settings["drop_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        profit = settings["profit_percent"] if settings["profit_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        size = settings["order_size"] if settings["order_size"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        balance_limit = settings["fixed_balance_limit"] if settings["fixed_balance_limit"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        taker_fee = settings["taker_fee_percent"] if settings["taker_fee_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        maker_fee = settings["maker_fee_percent"] if settings["maker_fee_percent"] is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        autobuy = "–≤–∫–ª—é—á–µ–Ω–∞" if settings["autobuy_enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"

        new_message = (
            f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
            f"üìâ *–ü–∞–¥–µ–Ω–∏–µ:* {drop}{' %' if isinstance(drop, (int, float)) else ''}\n"
            f"üí∞ *–ü—Ä–∏–±—ã–ª—å:* {profit}{' %' if isinstance(profit, (int, float)) else ''}\n"
            f"üí∏ *–û—Ä–¥–µ—Ä:* {size}{' USDT' if isinstance(size, (int, float)) else ''}\n"
            f"üíµ *–õ–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞:* {balance_limit}{' USDT' if isinstance(balance_limit, (int, float)) else ''}\n"
            f"üí≥ *–ö–æ–º–∏—Å—Å–∏—è —Ç–µ–π–∫–µ—Ä–∞:* {taker_fee}{' %' if isinstance(taker_fee, (int, float)) else ''}\n"
            f"üí≥ *–ö–æ–º–∏—Å—Å–∏—è –º–µ–π–∫–µ—Ä–∞:* {maker_fee}{' %' if isinstance(maker_fee, (int, float)) else ''}\n"
            f"ü§ñ *–¢–æ—Ä–≥–æ–≤–ª—è:* {autobuy}"
        )

        keyboard = [
            [InlineKeyboardButton("üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å % –ø–∞–¥–µ–Ω–∏—è", callback_data="set_drop")],
            [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å % –ø—Ä–∏–±—ã–ª–∏", callback_data="set_profit")],
            [InlineKeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞", callback_data="set_order")],
            [InlineKeyboardButton("üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –±–∞–ª–∞–Ω—Å–∞", callback_data="limiter")],
            [InlineKeyboardButton("üí≥ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏–∏", callback_data="set_fees")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            if message_id:
                await context.bot.edit_message_text(
                    chat_id=update.message.chat_id,
                    message_id=message_id,
                    text=new_message,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(new_message, parse_mode="Markdown", reply_markup=reply_markup)
        except BadRequest as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text(new_message, parse_mode="Markdown", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text(new_message, parse_mode="Markdown", reply_markup=reply_markup)

        context.user_data.clear()
    except ValueError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2.0")
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–≤–æ–¥–∞: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_setting: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await show_main_menu(update, context, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        context.user_data.clear()

def setup_telegram_bot():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("autobuy", autobuy))
    application.add_handler(CommandHandler("buy", buy))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("orders", orders))
    application.add_handler(CommandHandler("limiter", limiter))
    application.add_handler(CommandHandler("fee_taker", fee_taker))
    application.add_handler(CommandHandler("fee_maker", fee_maker))
    application.add_handler(CallbackQueryHandler(orders_page_callback, pattern="^(orders_prev|orders_next)$"))
    application.add_handler(CallbackQueryHandler(button_callback, pattern="^(set_drop|set_profit|set_order|limiter|set_fees|fee_taker|fee_maker)$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_setting))

    return application